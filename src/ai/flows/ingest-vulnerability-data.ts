'use server';
/**
 * @fileOverview This file defines a Genkit flow for ingesting vulnerability data from various sources, including NVD.
 *
 * - ingestVulnerabilityData - A function that handles the ingestion of vulnerability data.
 * - IngestVulnerabilityDataInput - The input type for the ingestVulnerabilityData function.
 * - IngestVulnerabilityDataOutput - The return type for the ingestVulnerabilityData function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const IngestVulnerabilityDataInputSchema = z.object({
  source: z
    .string()
    .describe("The source of the vulnerability data (e.g., 'NVD', 'vendor advisory', 'custom report')."),
  data: z.string().describe('The vulnerability data in JSON format.'),
});
export type IngestVulnerabilityDataInput = z.infer<
  typeof IngestVulnerabilityDataInputSchema
>;

const IngestVulnerabilityDataOutputSchema = z.object({
  normalizedData: z
    .string()
    .describe(
      'The normalized and standardized vulnerability data in JSON format.'
    ),
  success: z.boolean().describe('Indicates if the data ingestion was successful.'),
  message: z.string().optional().describe('Optional message providing details about the ingestion process.')
});
export type IngestVulnerabilityDataOutput = z.infer<
  typeof IngestVulnerabilityDataOutputSchema
>;

export async function ingestVulnerabilityData(
  input: IngestVulnerabilityDataInput
): Promise<IngestVulnerabilityDataOutput> {
  return ingestVulnerabilityDataFlow(input);
}

const normalizeVulnerabilityDataPrompt = ai.definePrompt({
  name: 'normalizeVulnerabilityDataPrompt',
  input: {schema: IngestVulnerabilityDataInputSchema},
  output: {schema: IngestVulnerabilityDataOutputSchema},
  prompt: `You are a security expert whose job is to normalize vulnerability data.

  Take the vulnerability data from the specified source and convert it to a standardized JSON format.
  Ensure that the normalized data includes key fields such as vulnerability ID, description, affected products, severity, and remediation steps.
  Return a JSON object with the normalized data, a success flag, and a message indicating the outcome of the normalization process.

  Source: {{{source}}}
  Data: {{{data}}}
  `,
});

const ingestVulnerabilityDataFlow = ai.defineFlow(
  {
    name: 'ingestVulnerabilityDataFlow',
    inputSchema: IngestVulnerabilityDataInputSchema,
    outputSchema: IngestVulnerabilityDataOutputSchema,
  },
  async input => {
    try {
      const {output} = await normalizeVulnerabilityDataPrompt(input);
      return output!;
    } catch (error: any) {
      console.error('Error ingesting vulnerability data:', error);
      return {
        normalizedData: '',
        success: false,
        message: `Failed to ingest vulnerability data: ${error.message || error}`,
      };
    }
  }
);
