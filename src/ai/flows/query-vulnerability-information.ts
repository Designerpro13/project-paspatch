'use server';

/**
 * @fileOverview A flow that allows querying the LLM about specific vulnerabilities or patch information.
 *
 * - queryVulnerabilityInformation - A function that handles the vulnerability information querying process.
 * - QueryVulnerabilityInformationInput - The input type for the queryVulnerabilityInformation function.
 * - QueryVulnerabilityInformationOutput - The return type for the queryVulnerabilityInformation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const QueryVulnerabilityInformationInputSchema = z.object({
  query: z.string().describe('The query about vulnerabilities or patch information.'),
});
export type QueryVulnerabilityInformationInput = z.infer<typeof QueryVulnerabilityInformationInputSchema>;

const QueryVulnerabilityInformationOutputSchema = z.object({
  response: z.string().describe('The LLM response to the vulnerability information query.'),
});
export type QueryVulnerabilityInformationOutput = z.infer<typeof QueryVulnerabilityInformationOutputSchema>;

export async function queryVulnerabilityInformation(input: QueryVulnerabilityInformationInput): Promise<QueryVulnerabilityInformationOutput> {
  return queryVulnerabilityInformationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'queryVulnerabilityInformationPrompt',
  input: {schema: QueryVulnerabilityInformationInputSchema},
  output: {schema: QueryVulnerabilityInformationOutputSchema},
  prompt: `You are a security expert specializing in providing information about vulnerabilities and patches.

  A user has the following question: {{{query}}}

  Provide a detailed and informative answer. Format your response using Markdown for clarity, including lists, bold text, and code blocks where appropriate.`,
});

const queryVulnerabilityInformationFlow = ai.defineFlow(
  {
    name: 'queryVulnerabilityInformationFlow',
    inputSchema: QueryVulnerabilityInformationInputSchema,
    outputSchema: QueryVulnerabilityInformationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
